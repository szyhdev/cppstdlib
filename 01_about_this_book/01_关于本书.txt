第一章 关于本书

一、缘起
二、阅读前的必要基础
三、本书的风格和结构
四、如何阅读本书
五、目前发展形势
六、范例程序代码和额外信息
七、反馈

一、缘起

- C++问世不久，就成为面向对象程序设计领域的事实上的标准，因此，标准化的呼声浮上了台面
  * 一旦有了一个可遵循的标准，就可能写出跨越PC甚至是大型主机等不同平台的程序
  * 同时，如果能建立一个标准程序库，程序员便可以运用可移植的通用组件和更高层次的抽象性，而不必从零开始

- C++标准化过程始于1989年，由ANSI/ISO委员会负责
  * 标准化工作以Bjarne Stroustrup的两本书为基础，《The C++ Programming Language》和《The Annotated C++ Reference Manual》
  * 这个标准在1997年通过，并最终于1998年成为ISO/ANSI标准

- 标准化过程本身包含一项任务，建立C++标准程序库
  * 作为核心语言的扩展，标准程序库提供一些通用组件
  * 通过大量运用C++的新的抽象能力和泛型特性，标准程序库提供一系列通用的类和接口
- C++标准程序库提供的一些通用组件
  * string类型
  * 各种数据结构，比如动态数组
  * 各种算法，比如排序算法
  * 数值类
  * 输入/输出类型
  * 国际化支持类型
- 这个标准程序库并非不言自明，本书将对其进行详细解释，有些内容并不是那么容易理解

二、阅读前的必要基础

- 要读懂本书的大部分内容，需要先了解C++语言
  * 本书讲述C++标准组件，但不讲述C++语言本身
  * 读者应该熟悉类、继承、模板、异常处理等概念，但不必熟悉每一个细节
- 注意，在标准化过程中，C++语言发生了很大的变化，必要时需要了解最新的语言特性

三、本书的风格和结构

- 标准程序库的组件具有相当程度的独立性，但彼此又存在关联，很难在描述一部分时不提及其他部分
- 本书可能的组织方式
  * 按照C++标准的顺序进行介绍
  * 首先纵览全部组件，然后逐章详细介绍
  * 按照组件的复杂程度从低到高进行介绍
- 最终，本书综合了这三种方式，首先介绍总体概念和工具，然后分章节详细描述每个组件
  * 其中，STL是标准程序库中最强大、最复杂、最激动人心的部分
  * 介绍每一个组件时，首先给出组件的目的、设计和范例，然后通过描述其使用方法和注意事项来讲解细节

- 第一章到第四章介绍本书和C++标准程序库
  * 第一章，关于本书
  * 第二章，C++及其标准程序库简介
  * 第三章，一般概念
  * 第四章，通用工具
- 第五章到第九章介绍标准模板库
  * 第五章，标准模板库
  * 第六章，STL容器
  * 第七章，STL迭代器
  * 第八章，STL仿函数
  * 第九章，STL算法
- 第十章到第十二章介绍一些标准类型
  * 第十章，特殊容器
  * 第十一章，字符串
  * 第十二章，数值
- 第十三章到第十四章介绍I/O和国际化
  * 第十三章，以流类完成输入和输出
  * 第十四章，国际化
- 剩下的章节
  * 第十五章，空间配置器
  * 附录，包括资源、参考书目和索引

四、如何阅读本书

- 本书既是介绍性的使用指南，又是结构化的参考手册
  * C++标准程序库的各个组件在相当程度上是彼此独立的，因此，在读完第二章到第四章后，可以按任意顺序阅读其他章节
  * 不过，第五章到第九章讲述的其实是同一组东西，应该从第五章开始阅读
- 学习新东西的最佳方式是，阅读范例，在http://www.josuttis.com/libbook上可以找到本书的范例代码

五、目前发展形势

- C++标准在本书编写期间已经完成，但有些编译器可能还无法与之兼容
- 本书的范例程序使用EGCS编译器2.8版本编译通过

六、范例程序代码和额外信息

- 在http://www.josuttis.com/libbook上可以找到本书及其所有的范例代码，还有关于C++标准程序库的其他一些信息

七、反馈

- 可以通过电子邮件libbook@josuttis.com对本书提出意见

<2022-12-22>
